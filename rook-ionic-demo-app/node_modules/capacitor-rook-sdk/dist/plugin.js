var capacitorRookSDK = (function (exports, core) {
    'use strict';

    const RookSDK = core.registerPlugin('RookSDK', {
        web: () => {
            throw new Error('Not implemented for web');
        },
    });

    const RookConfig = {
        initRook: (credentials) => {
            return RookSDK.initRook(Object.assign(Object.assign({}, credentials), { enableLogs: credentials.enableLogs || false }));
        },
        updateUserId: (userId) => {
            return RookSDK.updateUserId(userId);
        },
        getUserId: () => {
            return RookSDK.getUserId();
        },
        clearUserId: () => {
            return RookSDK.clearUserId();
        },
        syncUserTimeZone: () => {
            return RookSDK.syncUserTimeZone();
        },
        enableAppleHealthSync: () => {
            return RookSDK.enableAppleHealthSync();
        },
        disableAppleHealthSync: () => {
            return RookSDK.disableAppleHealthSync();
        },
        isAppleHealthSyncEnable: () => {
            return RookSDK.isAppleHealthSyncEnable();
        },
    };

    const RookPermissions = {
        requestAllAppleHealthPermissions: () => {
            return RookSDK.requestAllAppleHealthPermissions();
        },
        requestAllHealthConnectPermissions: () => {
            return RookSDK.requestAllHealthConnectPermissions();
        },
        requestAllPermissions: () => {
            return RookSDK.requestAllPermissions();
        },
        openIOSSettings: () => {
            return RookSDK.openIOSAppleHealth();
        },
        openHealthConnectSettings: () => {
            return RookSDK.openHealthConnectSettings();
        },
        healthConnectHasPermissions: () => {
            return RookSDK.healthConnectHasPermissions();
        },
        requestAndroidBackgroundPermissions: () => {
            return RookSDK.requestAndroidBackgroundPermissions();
        },
    };

    const RookAppleHealth = {
        enableBackGroundUpdates: () => {
            return RookSDK.enableBackGroundUpdates();
        },
        disableBackGroundUpdates: () => {
            return RookSDK.disableBackGroundUpdates();
        },
    };

    const RookHealthConnect = {
        scheduleYesterdaySync: (props) => {
            return RookSDK.scheduleYesterdaySync(props);
        },
    };

    const isValidDate = (date) => {
        const regex = /^\d{4}-\d{2}-\d{2}$/;
        if (!regex.test(date)) {
            throw new Error(`Invalid format: ${date}, the correct format is YYYY-MM-DD`);
        }
    };

    const RookSummaries = {
        shouldAndroidSyncFor: (props) => {
            isValidDate(props.date);
            return RookSDK.shouldSyncFor(props);
        },
        syncSleepSummary: (props) => {
            isValidDate(props.date);
            return RookSDK.syncSleepSummary(props);
        },
        syncBodySummary: (props) => {
            isValidDate(props.date);
            return RookSDK.syncBodySummary(props);
        },
        syncPhysicalSummary: (props) => {
            isValidDate(props.date);
            return RookSDK.syncPhysicalSummary(props);
        },
        reSyncFailedSummaries: () => {
            return RookSDK.reSyncFailedSummaries();
        },
        syncSummaries: () => {
            return RookSDK.syncSummaries();
        },
    };

    const RookEvents = {
        syncEvents: () => {
            return RookSDK.syncEvents();
        },
        syncPhysicalEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncPhysicalEvents(props);
        },
        syncBloodGlucoseEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncBloodGlucoseEvents(props);
        },
        syncBloodPressureEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncBloodPressureEvents(props);
        },
        syncBodyMetricsEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncBodyMetricsEvents(props);
        },
        syncBodyHeartRateEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncBodyHeartRateEvents(props);
        },
        syncPhysicalHeartRateEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncPhysicalHeartRateEvents(props);
        },
        syncHydrationEvents: (props) => {
            isValidDate(props.date);
            isValidDate(props.date);
            return RookSDK.syncHydrationEvents(props);
        },
        syncNutritionEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncNutritionEvents(props);
        },
        syncBodyOxygenationEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncBodyOxygenationEvents(props);
        },
        syncPhysicalOxygenationEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncPhysicalOxygenationEvents(props);
        },
        syncTemperatureEvents: (props) => {
            isValidDate(props.date);
            return RookSDK.syncTemperatureEvents(props);
        },
        syncPendingEvents: () => {
            return RookSDK.syncPendingEvents();
        },
    };

    exports.RookAppleHealth = RookAppleHealth;
    exports.RookConfig = RookConfig;
    exports.RookEvents = RookEvents;
    exports.RookHealthConnect = RookHealthConnect;
    exports.RookPermissions = RookPermissions;
    exports.RookSummaries = RookSummaries;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, capacitorExports);
//# sourceMappingURL=plugin.js.map
