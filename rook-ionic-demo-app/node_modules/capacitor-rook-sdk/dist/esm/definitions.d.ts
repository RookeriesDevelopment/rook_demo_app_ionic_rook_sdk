export type CheckAvailabilityResponse = 'INSTALLED' | 'NOT_INSTALLED' | 'NOT_SUPPORTED';
export type Environment = 'production' | 'sandbox';
export type InitRookProps = {
    environment: Environment;
    clientUUID: string;
    password: string;
    enableLogs?: boolean;
};
export type DateProps = {
    date: string;
};
export type UpdateUserIdProps = {
    userId: string;
};
export type UserIdResult = {
    userId: string;
};
export type BoolResult = {
    result: boolean;
};
export type HealthDataType = 'SLEEP_SUMMARY' | 'PHYSICAL_SUMMARY' | 'BODY_SUMMARY' | 'PHYSICAL_EVENT' | 'BLOOD_GLUCOSE_BODY_EVENT' | 'BLOOD_PRESSURE_BODY_EVENT' | 'BODY_METRICS_EVENT' | 'HEART_RATE_BODY_EVENT' | 'HEART_RATE_PHYSICAL_EVENT' | 'HYDRATION_BODY_EVENT' | 'NUTRITION_BODY_EVENT' | 'OXYGENATION_BODY_EVENT' | 'OXYGENATION_PHYSICAL_EVENT' | 'TEMPERATURE_BODY_EVENT';
export type ShouldSyncProps = {
    type: HealthDataType;
    date: string;
};
export type ConfigurationDoOnEnd = 'oldest' | 'latest' | 'nothing';
export type ConfigurationDoOnEndProps = {
    doOnEnd: ConfigurationDoOnEnd;
};
export interface RookSDKPlugin {
    initRook: (props: InitRookProps) => Promise<boolean>;
    updateUserId: (props: UpdateUserIdProps) => Promise<boolean>;
    getUserId: () => Promise<UserIdResult>;
    clearUserId: () => Promise<boolean>;
    enableAppleHealthSync: () => Promise<boolean>;
    disableAppleHealthSync: () => Promise<boolean>;
    isAppleHealthSyncEnable: () => Promise<boolean>;
    syncUserTimeZone: () => Promise<boolean>;
    checkAvailability: () => Promise<CheckAvailabilityResponse>;
    requestAllAppleHealthPermissions: () => Promise<boolean>;
    requestAllHealthConnectPermissions: () => Promise<boolean>;
    requestAllPermissions: () => Promise<boolean>;
    openIOSAppleHealth: () => Promise<boolean>;
    openHealthConnectSettings: () => Promise<boolean>;
    healthConnectHasPermissions: () => Promise<boolean>;
    requestAndroidBackgroundPermissions: () => Promise<boolean>;
    enableBackGroundUpdates: () => Promise<BoolResult>;
    disableBackGroundUpdates: () => Promise<BoolResult>;
    scheduleYesterdaySync: (props: ConfigurationDoOnEndProps) => Promise<BoolResult>;
    shouldSyncFor: (props: ShouldSyncProps) => Promise<BoolResult>;
    syncSleepSummary: (props: DateProps) => Promise<BoolResult>;
    syncBodySummary: (props: DateProps) => Promise<BoolResult>;
    syncPhysicalSummary: (props: DateProps) => Promise<BoolResult>;
    reSyncFailedSummaries: () => Promise<BoolResult>;
    syncSummaries: () => Promise<BoolResult>;
    syncYesterdaySummaries: () => Promise<BoolResult>;
    syncEvents: () => Promise<BoolResult>;
    syncPhysicalEvents: (props: DateProps) => Promise<BoolResult>;
    syncBloodGlucoseEvents: (props: DateProps) => Promise<BoolResult>;
    syncBloodPressureEvents: (props: DateProps) => Promise<BoolResult>;
    syncBodyMetricsEvents: (props: DateProps) => Promise<BoolResult>;
    syncBodyHeartRateEvents: (props: DateProps) => Promise<BoolResult>;
    syncPhysicalHeartRateEvents: (props: DateProps) => Promise<BoolResult>;
    syncHydrationEvents: (props: DateProps) => Promise<BoolResult>;
    syncNutritionEvents: (props: DateProps) => Promise<BoolResult>;
    syncBodyOxygenationEvents: (props: DateProps) => Promise<BoolResult>;
    syncPhysicalOxygenationEvents: (props: DateProps) => Promise<BoolResult>;
    syncTemperatureEvents: (props: DateProps) => Promise<BoolResult>;
    syncPendingEvents: () => Promise<BoolResult>;
}
