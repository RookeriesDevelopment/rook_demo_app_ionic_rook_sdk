import Foundation
import Capacitor

/**
 * Please read the Capacitor iOS Plugin Development Guide
 * here: https://capacitorjs.com/docs/plugins/ios
 */
@objc(RookSDKPlugin)
public class RookSDKPlugin: CAPPlugin {

  private let configuration: RookConfiguration = RookConfiguration()
  private let permissions: RookPermissions = RookPermissions()
  private let backGround: RookBackGround = RookBackGround()
  private let syncSummaries: RookSummaries = RookSummaries()
  private let syncEvents: RookEvents = RookEvents()

  // MARK: - Configuration

  @objc func initRook(_ call: CAPPluginCall) {
    let result = configuration.initRook(
      environment: call.getString("environment", "sandbox"),
      clientUUID: call.getString("clientUUID", ""),
      password: call.getString("password", ""),
      enableLogs: call.getBool("enableLogs") ?? false
    )
    call.resolve(["result": result])
  }

  @objc func updateUserId(_ call: CAPPluginCall) {
    let userId: String = call.getString("userId","")
    guard !userId.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
      call.reject("User id empty")
      return
    }
    configuration.updateUserId(
      userId: call.getString("userId",""),
      call: call)
  }

  @objc func getUserId(_ call: CAPPluginCall) {
    configuration.getUserId(call: call)
  }

  @objc func clearUserId(_ call: CAPPluginCall) {
    configuration.clearUserId(call: call)
  }

  @objc func deleteUserFromRook(_ call: CAPPluginCall) {
    configuration.deleteUserFromRook(call: call)
  }

  @objc func enableAppleHealthSync(_ call: CAPPluginCall) {
    configuration.enableAppleHealthSync(call: call)
  }

  @objc func disableAppleHealthSync(_ call: CAPPluginCall) {
    configuration.disableAppleHealthSync(call: call)
  }

  @objc func isAppleHealthSyncEnable(_ call: CAPPluginCall) {
    let isEnable: Bool = configuration.isAppleHealthSyncEnable()
    call.resolve(["isEnable" : isEnable])
  }

  @objc func checkAvailability(_ call: CAPPluginCall) {
    call.resolve(["result": configuration.checkAvailability()])
  }

  @objc func syncUserTimeZone(_ call: CAPPluginCall) {
    configuration.syncUserTimeZone(call: call)
  }

  // MARK:  Permission

  @objc func requestAllAppleHealthPermissions(_ call: CAPPluginCall) {
    permissions.requestAllAppleHealthPermissions(call: call)
  }

  @objc func requestAllHealthConnectPermissions(_ call: CAPPluginCall) {
    permissions.requestAllHealthConnectPermissions(call: call)
  }

  @objc func requestAllPermissions(_ call: CAPPluginCall) {
    permissions.requestAllPermissions(call: call)
  }

  @objc func openIOSAppleHealth(_ call: CAPPluginCall) {
    permissions.openIOSAppleHealth(call: call)
  }

  @objc func openHealthConnectSettings(_ call: CAPPluginCall) {
    permissions.openHealthConnectSettings(call: call)
  }

  @objc func healthConnectHasPermissions(_ call: CAPPluginCall) {
    permissions.healthConnectHasPermissions(call: call)
  }

  @objc func requestAndroidBackgroundPermissions(_ call: CAPPluginCall) {
    permissions.requestAndroidBackgroundPermissions(call: call)
  }

  // MARK:  Background

  @objc func enableBackGroundUpdates(_ call: CAPPluginCall) {
    backGround.enableBackGroundUpdates(call: call)
  }

  @objc func disableBackGroundUpdates(_ call: CAPPluginCall) {
    backGround.disableBackGroundUpdates(call: call)
  }

  // MARK:  Manual Sync Summaries

  @objc func shouldSyncFor(_ call: CAPPluginCall) {
    call.unimplemented("Not implemented on iOS.")
  }

  @objc func syncSummaries(_ call: CAPPluginCall) {
    syncSummaries.syncSummaries(call: call)
  }

  @objc public func syncSleepSummary(_ call: CAPPluginCall) {
    syncSummaries.syncSleepSummary(call: call)
  }

  @objc public func syncPhysicalSummary(_ call: CAPPluginCall) {
    syncSummaries.syncPhysicalSummary(call: call)
  }

  @objc public func syncBodySummary(_ call: CAPPluginCall) {
    syncSummaries.syncBodySummary(call: call)
  }

  @objc public func reSyncFailedSummaries(_ call: CAPPluginCall) {
    syncSummaries.reSyncFailedSummaries(call: call)
  }

  // MARK:  Manual Sync Events

  @objc func syncBodyHeartRateEvents(_ call: CAPPluginCall) {
    syncEvents.syncBodyHeartRateEvent(call: call)
  }
  
  @objc func syncPhysicalHeartRateEvents(_ call: CAPPluginCall) {
    syncEvents.syncPhysicalHeartRateEvent(call: call)
  }
  
  @objc func syncBodyOxygenationEvents(_ call: CAPPluginCall) {
    syncEvents.syncBodyOxygenationEvent(call: call)
  }
  
  @objc func syncPhysicalOxygenationEvents(_ call: CAPPluginCall) {
    syncEvents.syncPhysicalOxygenationEvent(call: call)
  }
  
  @objc func syncPhysicalEvents(_ call: CAPPluginCall) {
    syncEvents.syncTrainingEvent(call: call)
  }
  
  @objc func syncTemperatureEvents(_ call: CAPPluginCall) {
    syncEvents.syncTemperatureEvents(call: call)
  }
  
  @objc func syncBloodPressureEvents(_ call: CAPPluginCall) {
    syncEvents.syncBloodPressureEvents(call: call)
  }
  
  @objc func syncBloodGlucoseEvents(_ call: CAPPluginCall) {
    syncEvents.syncBloodGlucoseEvents(call: call)
  }
  
  @objc func syncBodyMetricsEvents(_ call: CAPPluginCall) {
    syncEvents.syncBodyMetricsEvents(call: call)
  }
  
  @objc func syncPendingEvents(_ call: CAPPluginCall) {
    syncEvents.syncPendingEvents(call: call)
  }

  @objc func syncEvents(_ call: CAPPluginCall) {
    syncEvents.syncEvents(call: call)
  }
}
