//
//  RookSummaries.swift
//  Plugin
//
//  Created by Francisco Guerrero Escamilla on 04/05/24.
//  Copyright Â© 2024 Max Lynch. All rights reserved.
//

import Foundation
import RookSDK
import Capacitor

@objc public class RookSummaries: NSObject {

  private let summariesManager: RookSummaryManager = RookSummaryManager()

  @objc public func syncSummaries(call: CAPPluginCall) {
    summariesManager.syncSummaries {
      call.resolve(["result" : true])
    }
  }

  @objc public func syncSleepSummary(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    summariesManager.syncSleepSummary(from: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }

  @objc public func syncPhysicalSummary(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    summariesManager.syncPhysicalSummary(from: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }

  @objc public func syncBodySummary(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    summariesManager.syncBodySummary(from: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }

  @objc public func reSyncFailedSummaries(call: CAPPluginCall) {
    summariesManager.syncPendingSummaries { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
}
