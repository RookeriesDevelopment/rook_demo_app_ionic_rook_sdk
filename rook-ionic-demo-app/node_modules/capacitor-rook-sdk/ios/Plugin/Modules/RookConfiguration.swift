//
//  RookConfiguration.swift
//  Plugin
//
//  Created by Francisco Guerrero Escamilla on 29/04/24.
//  Copyright Â© 2024 Max Lynch. All rights reserved.
//

import Foundation
import Capacitor
import RookSDK
import RookAppleHealth
import HealthKit

@objc public class RookConfiguration: NSObject {

  private let configuration: RookConnectConfigurationManager = RookConnectConfigurationManager.shared

  @objc public func initRook(environment: String,
                             clientUUID: String,
                             password: String,
                             enableLogs: Bool) -> Bool {
      
    configuration.setConfiguration(clientUUID: clientUUID,secretKey: password)

    switch environment {
    case "production":
      configuration.setEnvironment(.production)
      IOSClass.shared.disableTest()
    default:
      configuration.setEnvironment(.sandbox)
      IOSClass.shared.disableTest()
    }

    configuration.setConsoleLogAvailable(enableLogs)
    configuration.initRook()
    return true
  }

  @objc public func checkAvailability() -> String {
    if HKHealthStore.isHealthDataAvailable() {
      return "INSTALLED"
    } else {
      return "NOT_INSTALLED"
    }
  }

  @objc public func updateUserId(userId: String, call: CAPPluginCall) {
    configuration.updateUserId(userId) { result in
      switch result {
      case .success(let result):
        call.resolve(["result": result])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }

  @objc public func getUserId(call: CAPPluginCall) {
    configuration.getUserId { result in
      switch result {
      case .success(let id):
        call.resolve(["userId" : id])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }

  @objc public func clearUserId(call: CAPPluginCall) {
    configuration.clearUser { result in
      switch result {
      case .success(let result):
        call.resolve(["result": result])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }

  @objc public func deleteUserFromRook(call: CAPPluginCall) {
    configuration.removeUserFromRook { result in
      switch result {
      case .success(let result):
        call.resolve(["result": result])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }

  @objc public func enableAppleHealthSync(call: CAPPluginCall) {
    configuration.enableSync()
    call.resolve(["result": true])
  }

  @objc public func disableAppleHealthSync(call: CAPPluginCall) {
    configuration.disableSync()
    call.resolve(["result": true])
  }

  @objc public func isAppleHealthSyncEnable() -> Bool {
    return configuration.isSyncEnable()
  }

  @objc public func syncUserTimeZone(call: CAPPluginCall) {
    return configuration.syncUserTimeZone { result in
      switch result {
      case .success(let result):
        call.resolve(["result": result])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
}
