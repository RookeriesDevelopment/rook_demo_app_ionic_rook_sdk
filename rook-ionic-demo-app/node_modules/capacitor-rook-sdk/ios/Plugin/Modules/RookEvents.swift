//
//  RookEvents.swift
//  Plugin
//
//  Created by Francisco Guerrero Escamilla on 04/05/24.
//  Copyright Â© 2024 Max Lynch. All rights reserved.
//

import Foundation
import RookSDK
import Capacitor

@objc public class RookEvents: NSObject {
  
  private let eventsManager: RookEventsManager = RookEventsManager()
  
  @objc public func syncEvents(call: CAPPluginCall) {
    eventsManager.syncEvents {
      call.resolve(["result" : true])
    }
  }
  
  @objc public func syncBodyHeartRateEvent(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncBodyHeartRateEvent(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncPhysicalHeartRateEvent(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncPhysicalHeartRateEvent(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncBodyOxygenationEvent(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncBodyOxygenationEvent(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncPhysicalOxygenationEvent(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncPhysicalOxygenationEvent(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncTrainingEvent(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncTrainingEvent(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncTemperatureEvents(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncTemperatureEvents(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncBloodPressureEvents(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncBloodPressureEvents(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncBloodGlucoseEvents(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncBloodGlucoseEvents(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncBodyMetricsEvents(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncBodyMetricsEvents(date: date) { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
  @objc public func syncPendingEvents(call: CAPPluginCall) {
    let stringDate: String = call.getString("date", "")
    guard let date: Date = DateHelper().getDateFromString(stringDate: stringDate) else {
      return call.reject("incorrect date format should be yyyy-MM-dd")
    }
    eventsManager.syncPendingEvents { result in
      switch result {
      case .success(let success):
        call.resolve(["result" : success])
      case .failure(let error):
        call.reject(error.localizedDescription)
      }
    }
  }
  
}
