package io.tryrook.rook.sdk;

import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "RookSDK")
public class RookSDKPlugin extends Plugin {
    private RookImplementation implementation = new RookImplementation();

    @PluginMethod
    public void initRook(PluginCall call) {
        implementation.initRookConfigurationManager(this.getActivity().getApplicationContext());
        implementation.initRook(
                call.getString("environment", "sandbox"),
                call.getString("clientUUID", ""),
                call.getString("password", ""),
                call
        );
    }

    @PluginMethod
    public void updateUserId(PluginCall call) {
        implementation.updateUserId(call.getString("userId", ""), call);
    }

    @PluginMethod
    public void clearUserId(PluginCall call) {
        implementation.clearUserId(call);
    }

    @PluginMethod
    public void deleteUserFromRook(PluginCall call) {
        implementation.deleteUserFromRook(call);
    }

    @PluginMethod
    public void getUserId(PluginCall call) {
        implementation.getUserId(call);
    }

    @PluginMethod
    public void syncUserTimeZone(PluginCall call) {
        implementation.syncUserTimeZone(call);
    }

    @PluginMethod
    public void checkAvailability(PluginCall call) {
        implementation.checkAvailability(this.getActivity().getApplicationContext(), call);
    }

   @PluginMethod
    public void requestAllPermissions(PluginCall call) {
        try {
            implementation.requestAllPermissions(this.getActivity());

            JSObject result = new JSObject();
            result.put("result", true);
            call.resolve(result);
        }
        catch (Exception e) {
            call.reject("We couldn't request permissions", e);
        }
    }

    @PluginMethod
    public void requestAllHealthConnectPermissions(PluginCall call) {
        try {
            implementation.requestAllHealthConnectPermissions(this.getActivity());
            JSObject result = new JSObject();
            result.put("result", true);
            call.resolve(result);
        }
        catch (Exception e) {
            call.reject("We couldn't request permissions", e);
        }
    }

    @PluginMethod
    public void openHealthConnectSettings(PluginCall call) {
        implementation.openHealthConnectSettings(call);
    }

    @PluginMethod
    public void healthConnectHasPermissions(PluginCall call) {
        implementation.healthConnectHasPermissions(call);
    }

    @PluginMethod
    public void requestAndroidBackgroundPermissions(PluginCall call) {
        implementation.requestAndroidBackgroundPermissions(this.getActivity().getApplicationContext(), call);
    }

    @PluginMethod
    public  void shouldSyncFor(PluginCall call) {
        implementation.shouldSyncFor(call);
    }

    @PluginMethod
    public void scheduleYesterdaySync(PluginCall call) {
        implementation.scheduleYesterdaySync(call);
    }
    @PluginMethod
    public void syncSummaries(PluginCall call) {
        implementation.syncYesterdaySummaries(call);
    }

    @PluginMethod
    public void syncSleepSummary(PluginCall call) {
        implementation.syncSleepSummary(call);
    }

    @PluginMethod
    public void syncPhysicalSummary(PluginCall call) {
        implementation.syncPhysicalSummary(call);
    }

    @PluginMethod
    public void syncBodySummary(PluginCall call) {
        implementation.syncBodySummary(call);
    }

    @PluginMethod
    public void reSyncFailedSummaries(PluginCall call) {
        implementation.reSyncFailedSummaries(call);
    }

    @PluginMethod
    public void syncBodyHeartRateEvents(PluginCall call) {
        implementation.syncBodyHeartRateEvents(call);
    }

    @PluginMethod
    public void syncPhysicalHeartRateEvents(PluginCall call) {
        implementation.syncPhysicalHeartRateEvents(call);
    }

    @PluginMethod
    public void syncBodyOxygenationEvents(PluginCall call) {
        implementation.syncBodyOxygenationEvents(call);
    }

    @PluginMethod
    public void syncPhysicalOxygenationEvents(PluginCall call) {
        implementation.syncPhysicalOxygenationEvents(call);
    }

    @PluginMethod
    public void syncPhysicalEvents(PluginCall call) {
        implementation.syncPhysicalEvents(call);
    }

    @PluginMethod
    public void syncTemperatureEvents(PluginCall call) {
        implementation.syncTemperatureEvents(call);
    }

    @PluginMethod
    public void syncBloodPressureEvents(PluginCall call) {
        implementation.syncBloodPressureEvents(call);
    }

    @PluginMethod
    public void syncBloodGlucoseEvents(PluginCall call) {
        implementation.syncBloodGlucoseEvents(call);
    }

    @PluginMethod
    public void syncBodyMetricsEvents(PluginCall call) {
        implementation.syncBodyMetricsEvents(call);
    }

    @PluginMethod
    public void syncPendingEvents(PluginCall call) {
        implementation.syncPendingEvents(call);
    }

    @PluginMethod
    public void syncNutritionEvents(PluginCall call) {
        implementation.syncNutritionEvents(call);
    }

    @PluginMethod
    public void syncHydrationEvents(PluginCall call) {
        implementation.syncHydrationEvents(call);
    }
}
